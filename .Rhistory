tabelona = tabelona_backup
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
modelo = lmer(sym(coluna) ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
modelo = lmer(sym(coluna) ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('------------------------',coluna,'--------------------------'))
}
df_score
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('------------------------',coluna,'--------------------------'))
}
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
print(paste0('------------------------',coluna,'--------------------------'))
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
}
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
print(paste0('------------------------',coluna,'--------------------------'))
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('============='))
modelo = lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
}
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
print(paste0('------------------------',coluna,'--------------------------'))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('============='))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
}
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
print(paste0('------------------------',coluna,'--------------------------'))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('========================'))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
}
df_backup %>% nrow()
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
tabelona = tabelona_backup
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
titulo = lista_pilares_nomes[i]
p1 = retorne_p_ajust(retorne_p(summary(lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score))$coefficients[2, "Pr(>|t|)"]))
p = ggplot() +
geom_jitter(data=df_score, aes(x=as.factor(Ano), y=df_score[[coluna]], fill=as.factor(Ano)),
alpha=0.5, size=2.5, position=position_jitter(0.25), show.legend = F) +
geom_smooth(data=df_score, aes(x=as.numeric(Ano), y=df_score[[coluna]]), method = lm, color = "red") +
#geom_violin(data=df_score, aes(x=as.factor(Ano), y=df_score[[coluna]], fill=as.factor(Ano)),
#           show.legend = F, alpha=0.2) +
#geom_boxplot(data=df_score, aes(x=as.factor(Ano), y=df_score[[coluna]], fill=as.factor(Ano)),
#            alpha=0.90, show.legend = F, width = 0.5, fill = 'white') +
labs(y='Score (%)', title=adicionar_quebra_de_linha(titulo, 50), x='Years', subtitle=p1) +
theme(axis.title=element_text(size=9),
legend.position = "bottom", axis.line = element_line(colour = "black")) +
theme_bw() +
scale_y_continuous(breaks=seq(from = 0,
to = max(df_score[[coluna]],na.rm = T),
by = as.integer((max(df_score[[coluna]],na.rm = T) - min(df_score[[coluna]],na.rm = T))/10)),
limits = c(min(df_score[[coluna]],na.rm = T), max(df_score[[coluna]],na.rm = T))) +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11))
print(p)
#ggsave(paste0(coluna,".png"), height=11, width=20, units="cm", dpi= 600)
}
lista_pilares_nomes = c('Communication openness',
'Feedback and communication about errors',
'Frequency of events reported',
'Management support for patient safety',
'Teamwork across units',
'Teamwork within units',
'Handoffs and transitions',
'Organizational learning',
'Supervisor/manager expectations and actions promoting safety',
'Overall perception of patient safety',
'Nonpunitive response to errors',
'score_esc')
# Linear Mixed Model
library(lmerTest)
library(MuMIn)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
print(paste0('------------------------',coluna,'--------------------------'))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = df_score)
modelo %>% summary() %>% print()
print(paste0('========================'))
modelo = lmerTest::lmer(df_score[[coluna]] ~ as.numeric(Ano) + (1 + as.numeric(Ano)|Unidade), data = df_score)
modelo %>% summary() %>% print()
}
df_filter = df_filter_backup
df_filter
df_filter = df_filter_backup
df_filter
df_filter
df_filter# = df_filter_backup
coluna = '1. As pessoas se apoiam umas às outras nesta unidade'
tabelona = df_filter %>% group_by(Ano, Unidade) %>%
summarise(
prop = sum(!!sym(coluna) == 1, na.rm=T) / n()
)
tabelona$Ano = tabelona$Ano %>% as.factor()
tabelona$prop = NULL
tabelona = as.data.frame(tabelona)
tabelona
#################################################
for (coluna in names(df_filter)[c(70:74)] ){
#print(coluna)
tabela = df_filter %>% group_by(Ano, Unidade) %>%
summarise(
prop = (sum(!!sym(coluna) == 1, na.rm=T) / n())*100
)
tabela$Ano = tabela$Ano %>% as.factor()
tabela = as.data.frame(tabela)
names(tabela)[names(tabela) == "prop"] <- coluna
tabelona = merge(tabelona, tabela, by = c('Ano','Unidade'))
}
tabelona
############################################################################
# Função para remover caracteres especiais
remove_special_chars <- function(column_names) {
gsub("[^[:alnum:]_]", "_", column_names)
}
# Aplicar a função aos nomes das colunas
names(tabelona) <- remove_special_chars(names(tabelona))
names(tabelona) <- gsub("^([0-9])", "coluna\\1", names(tabelona))
#names(df) <- gsub("__", "_ ", names(df))
#names(df) <- gsub(":", " ", names(df))
names(tabelona)
############################################################################
lista_pilares = names(tabelona)[c(3:7)]
lista_pilares_nomes = c('Patient safety rating: Excellent',
'Patient safety rating: Very Good',
'Patient safety rating: Poor', #
'Patient safety rating: Fair', #
'Patient safety rating: Good') #Satisfactory
# Linear Mixed Model
library(lmerTest)
library(lmerTest)
for (i in 1:length(lista_pilares)){
coluna = lista_pilares[i]
titulo = lista_pilares_nomes[i]
p1 = retorne_p_ajust(retorne_p(summary(lmer(tabelona[[coluna]] ~ as.numeric(Ano) + (1 | Unidade), data = tabelona))$coefficients[2, "Pr(>|t|)"]))
tryCatch({
p = ggplot() +
geom_jitter(data=tabelona, aes(x=as.factor(Ano), y=tabelona[[coluna]], fill=as.factor(Ano)),
alpha=0.5, size=2.5, position=position_jitter(0.25), show.legend = F) +
geom_smooth(data=tabelona, aes(x=as.numeric(Ano), y=tabelona[[coluna]]), method = lm, color = "red") +
#geom_violin(data=tabelona, aes(x=as.factor(Ano), y=tabelona[[coluna]], fill=as.factor(Ano)),
#           show.legend = F, alpha=0.2) +
#geom_boxplot(data=tabelona, aes(x=as.factor(Ano), y=tabelona[[coluna]], fill=as.factor(Ano)),
#            alpha=0.90, show.legend = F, width = 0.5, fill = 'white') +
labs(y='Proportion (%)', title=adicionar_quebra_de_linha(titulo, 50), x='Years', subtitle=p1) +
theme(axis.title=element_text(size=9),
legend.position = "bottom", axis.line = element_line(colour = "black")) +
theme_bw() +
scale_y_continuous(breaks=seq(from = 0,
to = max(tabelona[[coluna]],na.rm = T),
by = round((max(tabelona[[coluna]],na.rm = T) - min(tabelona[[coluna]],na.rm = T))/10, 2)
),
limits = c(min(tabelona[[coluna]],na.rm = T), max(tabelona[[coluna]],na.rm = T))) +
theme(axis.title.x = element_text(size = 11),
axis.title.y = element_text(size = 11))
print(p)
ggsave(paste0(coluna,".png"), height=11, width=20, units="cm", dpi= 600)
}, error = function(e) {
texto = paste0('erro no grafico: ', coluna)
return(print(texto))
})
}
source("~/Codigos úteis/R program/df_ficticio.R", echo=F)
df = dff
library(lmerTest) # é melhor que library(lme4)
library(MuMIn) # R quadrado para modelos mistos #
# R2m = proporção explica apenas pelas variaveis fixas
# R2c = proporção explica pelas variaveis fixas e aleatoria # R quadrado geral
# r.squaredGLMM(modelo) #código de aplicação
library(pander)
# anova(modelo) %>% pander()
# para avaliar a significancia geral dos preditores
library(sjPlot)
#criar tabelas e gráficos de resultados de modelos estatísticos de uma forma que é fácil de usar em relatórios e artigos científicos.
# Gerar a tabela formatada com personalizações
#tab_model(modelo, show.re.var = TRUE, show.icc = TRUE, digits = 3, title = "Resultados do Modelo Misto")
# Gerar um gráfico dos efeitos aleatórios
#plot_model(modelo, type = "re")
# Gerar uma tabela de resumo descritivo
#tab_summary(df)
# Visualizar a estrutura do data frame
#view_df(df)
modelo_lm <- lm(response ~ fixed_effects + group, data = df)
# Primeira Avaliação
modelo_lm %>% summary()
modelo_lm %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo_lm %>% lm_diagnostic()
# Coeficientes
cbind(Estimate = coef(modelo_lm), confint(modelo_lm)) %>% round(2)
# Previsões
df$pred = modelo_lm %>% predict()
# Normalidade dos Residuos
df$residuals = modelo_lm %>% residuals()
teste_normalidade(df, 'residuals')
# Grafico de Previsão
ggplot(df, aes(x = fixed_effects, y = response, color = group)) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
labs(title = "Modelo Linear Simples", x='x', y='y', color='groups')
ggsave("Modelo Linear Simples.jpg", height=10, width=15, units="cm", dpi= 600)
modelo <- lmer(response ~ fixed_effects + (1|group), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
# fixef(modelo) # Coeficientes fixos
coef(modelo) # Coeficientes
#ranef(modelo) # Efeitos aleatórios
confint(modelo) # Intervalos de confiança
#anova(modelo) # ANOVA
#VarCorr(modelo) # Matriz de variâncias e covariâncias dos efeitos aleatórios
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
ggplot(df, aes(x = fixed_effects, y = response, color = group)) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
labs(title = "Modelo com Interceptos Aleatórios", x='x', y='y', color='groups')
ggsave("Modelo com Interceptos Aleatórios.jpg", height=10, width=15, units="cm", dpi= 600)
# Diferença
t.test(predict(modelo_lm), predict(modelo), paired = T)
t.test(residuals(modelo_lm), residuals(modelo), paired = T)
(predict(modelo_lm) - predict(modelo)) %>% summary()
plotar_boxplot_residuos(list(modelo_lm, modelo)) + labs(y = 'Residuos dos Modelos') + scale_x_discrete(labels = c('Linear','Misto'))
modelo <- lmer(response2 ~ fixed_effects + (1 + fixed_effects||group), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
coef(modelo) # Coeficientes
confint(modelo) # Intervalos de confiança
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
ggplot(df, aes(x = fixed_effects, y = response2, color = group)) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
labs(title = "Modelo com Interceptos e Inclinações Aleatórios", x='x', y='y', color='groups')
ggsave("Modelo com Interceptos e Inclinações Aleatórios.jpg", height=10, width=15, units="cm", dpi= 600)
modelo <- lmer(response3 ~ fixed_effects + (0 + fixed_effects | group), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
coef(modelo) # Coeficientes
confint(modelo) # Intervalos de confiança
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
ggplot(df, aes(x = fixed_effects, y = response3, color = group)) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
labs(title = "Modelo com Inclinações Aleatórias", x='x', y='y', color='groups')
ggsave("Modelo com Inclinações Aleatórias.jpg", height=10, width=15, units="cm", dpi= 600)
modelo <- lmer(response4 ~ fixed_effects + (1|group) + (1|group2), data = df)
# aparentemente só funfa de verdade assim -->
df$inter_ <- factor(interaction(df$group, df$group2))
modelo_inter <- lmer(response4 ~ fixed_effects + (1|inter_), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
coef(modelo) # Coeficientes
confint(modelo) # Intervalos de confiança
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
ggplot(df, aes(x = fixed_effects, y = response4, color=interaction(group2, group1))) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
facet_grid(group2~group1) +
labs(title = "Modelo Efeitos Cruzados", x='x', y='y', color='groups')
ggsave("Modelo Efeitos Cruzados.jpg", height=10, width=15, units="cm", dpi= 600)
anova(modelo_inter, modelo)
# Diferença
t.test(predict(modelo_inter), predict(modelo), paired = T)
t.test(residuals(modelo_inter), residuals(modelo), paired = T)
(predict(modelo_inter) - predict(modelo)) %>% summary()
plotar_boxplot_residuos(list(modelo_inter, modelo)) + labs(y = 'Residuos dos Modelos') + scale_x_discrete(labels = c('Interação','Cruzado'))
modelo <- lmer(response5 ~ fixed_effects + (1|group/group1), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
coef(modelo) # Coeficientes
confint(modelo) # Intervalos de confiança
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
df$inter_ <- factor(interaction(df$group, df$group1))
ggplot(df, aes(x = fixed_effects, y = response5, color=interaction(group, group1))) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
facet_grid(~inter_) +
labs(title = "Modelo Efeitos Aleatórios Aninhados", x='x', y='y', color='groups')
ggsave("Modelo Efeitos Aleatórios Aninhados.jpg", height=10, width=15, units="cm", dpi= 600)
modelo <- lmer(response2 ~ fixed_effects + (1 + fixed_effects|group), data = df)
# Metricas de Avaliação
modelo %>% metricas_de_avaliacao_regressao()
# Analise dos Residuos
modelo %>% lm_diagnostic()
# Coeficientes
summary(modelo)
coef(modelo) # Coeficientes
confint(modelo) # Intervalos de confiança
# Previsões
df$pred = modelo %>% predict()
# Normalidade dos Residuos
df$residuals = modelo %>% residuals()
teste_normalidade(df, 'residuals')
# Analise Grafica das previsões
ggplot(df, aes(x = fixed_effects, y = response2, color = group)) +
geom_point(alpha=0.5, size=2.5) +
geom_smooth(aes(y = pred), method = "lm", se=TRUE, size = 0.75) +
labs(title = "Modelo Efeito Aleatórios Correlacionados", x='x', y='y', color='groups')
ggsave("Modelo Efeito Aleatórios Correlacionados.jpg", height=10, width=15, units="cm", dpi= 600)
#Modelo com Interceptos e Inclinações Aleatórios
modelo2 <- lmer(response2 ~ fixed_effects + (1 + fixed_effects||group), data = df)
anova(modelo, modelo2)
# Diferença
t.test(predict(modelo2), predict(modelo), paired = T)
t.test(residuals(modelo2), residuals(modelo), paired = T)
(predict(modelo2) - predict(modelo)) %>% summary()
plotar_boxplot_residuos(list(modelo2, modelo)) + labs(y = 'Residuos dos Modelos') + scale_x_discrete(labels = c('Tudo Aleatório','Correlacionado'))
# Gerar a tabela formatada com personalizações
sjPlot::tab_model(modelo, modelo2, show.re.var = TRUE, show.icc = TRUE, digits = 3, title = "Resultados do Modelo Misto")
# Gerar um gráfico dos efeitos aleatórios
sjPlot::plot_model(modelo, type = "re")
## Independência dos resíduos (Durbin-Watson): PARA dados longituginais
#durbinWatsonTest(modelo_lm)
source("~/Codigos úteis/R program/executar_sempre.R", echo=TRUE)
install.packages("usethis")
library(usethis)
create_package("C:/Users/gabri/OneDrive/Documentos/My Packages R")
library(devtools)
library(usethis)
create_package("C:/Users/gabri/OneDrive/Documentos/My Packages R")
create_package("C:/Users/gabri/OneDrive/Documentos/My_Packages_R")
create_package("Users/gabri/OneDrive/Documentos/My_Packages_R")
create_package("/Documentos/My_Packages_R")
library(devtools)
library(usethis)
create_package("C:/Users/gabri/OneDrive/Documentos/My_Packages_R")
create_package("C:/Users/gabri/OneDrive/Documentos/MyPackagesR")
library(available)
available::available('analyticsTools')
usethis::use_git()
